name: Update Edge Versions

on:
  schedule:
    - cron: '15 * * * *'  # Chạy mỗi 1 giờ, vào phút 15
  workflow_dispatch: # Cho phép chạy thủ công

jobs:
  update-versions:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check Edge versions and update README
      shell: powershell
      run: |
        # Fetch all Edge release data once
        Write-Host "Fetching Edge release data..."
        try {
            $allReleases = Invoke-RestMethod "https://edgeupdates.microsoft.com/api/products"
        } catch {
            Write-Host "Error fetching Edge data: $_"
            exit 1
        }
        
        # Lấy phiên bản cho từng channel
        $channelVersions = @{
            "Stable" = ($allReleases | Where-Object { $_.Product -eq "Stable" }).Releases |
                       Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                       Sort-Object PublishedTime -Descending |
                       Select-Object -First 1 -ExpandProperty ProductVersion
            "Beta" = ($allReleases | Where-Object { $_.Product -eq "Beta" }).Releases |
                     Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                     Sort-Object PublishedTime -Descending |
                     Select-Object -First 1 -ExpandProperty ProductVersion
            "Dev" = ($allReleases | Where-Object { $_.Product -eq "Dev" }).Releases |
                    Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                    Sort-Object PublishedTime -Descending |
                    Select-Object -First 1 -ExpandProperty ProductVersion
            "Canary" = ($allReleases | Where-Object { $_.Product -eq "Canary" }).Releases |
                       Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                       Sort-Object PublishedTime -Descending |
                       Select-Object -First 1 -ExpandProperty ProductVersion
        }
        
        Write-Host "Latest versions:"
        $channelVersions.GetEnumerator() | ForEach-Object { Write-Host "  $($_.Key): $($_.Value)" }
        
        # Lấy danh sách releases từ GitHub
        Write-Host "Fetching GitHub releases..."
        try {
            $githubReleases = Invoke-RestMethod -Uri "https://api.github.com/repos/bibicadotnet/microsoft-edge-multi-portable/releases" -Headers @{
                "User-Agent" = "GitHub-Actions"
            }
        } catch {
            Write-Host "Error fetching GitHub releases: $_"
            exit 1
        }
        
        # Tạo nội dung mới cho README
        $versionLines = @()
        
        foreach ($channel in @("Stable", "Beta", "Dev", "Canary")) {
            $version = $channelVersions[$channel]
            $channelDisplayName = if ($channel -eq "Dev") { "Developer" } else { $channel }
            
            if ($version) {
                # Tìm release tương ứng
                $releasePattern = "edge-$($channel.ToLower())-portable-x64_$($version)_"
                $matchingRelease = $githubReleases | Where-Object { $_.tag_name -like "$releasePattern*" }
                
                if ($matchingRelease) {
                    # Có portable release
                    $versionLines += "- Microsoft Edge $channelDisplayName Portable [$version](https://github.com/bibicadotnet/microsoft-edge-multi-portable/releases/tag/$($matchingRelease.tag_name))"
                } else {
                    # Chưa có portable release
                    $versionLines += "- Microsoft Edge $channelDisplayName $version (latest portable not available yet)"
                }
            }
        }
        
        # Đọc README hiện tại
        if (-not (Test-Path "README.md")) {
            Write-Host "README.md not found!"
            exit 1
        }
        
        $readmeContent = Get-Content "README.md" -Raw -Encoding UTF8
        
        # Tìm và thay thế chỉ phần Microsoft Edge Portable Latest
        $startMarker = "### Microsoft Edge Portable Latest"
        $endMarker = "**Download the pre-built"
        
        $startIndex = $readmeContent.IndexOf($startMarker)
        $endIndex = $readmeContent.IndexOf($endMarker)
        
        if ($startIndex -eq -1 -or $endIndex -eq -1) {
            Write-Host "Cannot find markers in README.md"
            Write-Host "Looking for: '$startMarker' and '$endMarker'"
            exit 1
        }
        
        # Tách nội dung
        $beforeVersions = $readmeContent.Substring(0, $startIndex)
        $afterVersions = $readmeContent.Substring($endIndex)
        
        # Tạo chỉ phần Microsoft Edge Portable Latest
        $versionSection = "### Microsoft Edge Portable Latest`r`n" +
                         ($versionLines -join "`r`n") + "`r`n" +
                         "`r`n"
        
        # Ghép nội dung mới
        $newReadmeContent = $beforeVersions + $versionSection + $afterVersions
        
        # Ghi vào file
        Set-Content "README.md" -Value $newReadmeContent -Encoding UTF8 -NoNewline
        
        Write-Host "README.md updated with latest versions"
        
        # Hiển thị thay đổi
        Write-Host "`nVersion information updated:"
        $versionLines | ForEach-Object { Write-Host "  $_" }

    - name: Check for changes and commit
      shell: powershell
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes
        git add README.md
        
        $changes = git diff --cached --name-only
        if ([string]::IsNullOrEmpty($changes)) {
            Write-Host "No changes to commit"
        } else {
            Write-Host "Changes detected, committing..."
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
            git commit -m "Update Edge versions - $timestamp"
            git push
            Write-Host "Changes committed and pushed"
        }
