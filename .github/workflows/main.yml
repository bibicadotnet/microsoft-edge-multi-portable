name: Edge Multi Portable Auto Builder

on:
  schedule:
    - cron: '0 * * * *' # chạy mỗi giờ
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get Chrome++ version
        id: chromeplus-version
        shell: pwsh
        run: |
          $chromePlusRelease = Invoke-RestMethod "https://api.github.com/repos/Bush2021/chrome_plus/releases/latest"
          $chromePlusVersion = $chromePlusRelease.tag_name
          echo "CHROMEPLUS_VERSION=$chromePlusVersion" >> $env:GITHUB_OUTPUT

      - name: Fetch multi Edge releases list
        id: fetch-list
        shell: pwsh
        run: |
          $releases = Invoke-RestMethod "https://api.github.com/repos/bibicadotnet/edge_installer_multi/releases"
          $list = @()
          foreach ($rel in $releases) {
            if ($rel.tag_name -match "^(stable|beta|dev|canary)-\d+\.\d+\.\d+\.\d+$") {
              $list += $rel.tag_name
            }
          }
          echo "EDGE_TAGS=$($list -join ',')" >> $env:GITHUB_OUTPUT

      - name: Process all Edge channels and archs
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $chromePlusVersion = "${{ steps.chromeplus-version.outputs.CHROMEPLUS_VERSION }}"
          $tags = "${{ steps.fetch-list.outputs.EDGE_TAGS }}" -split ","
          $arches = @("x86","x64","ARM64")

          foreach ($tag in $tags) {
            $parts = $tag -split "-"
            $channel = $parts[0]
            $version = $parts[1]
            $portableTag = "$channel-portable-$version"

            # Check if portable release exists
            try {
              Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/$portableTag" -Headers @{Authorization="token $env:GITHUB_TOKEN"} -ErrorAction Stop
              Write-Host "Portable release $portableTag exists, skipping..."
              continue
            } catch {
              if ($_.Exception.Response.StatusCode -ne 404) { throw }
            }

            $files = @()
            foreach ($arch in $arches) {
              $assetName = "edge-$channel-$arch-$version.zip"
              $assetUrl = Invoke-RestMethod "https://api.github.com/repos/bibicadotnet/edge_installer_multi/releases/tags/$tag" | ForEach-Object {
                $_.assets | Where-Object { $_.name -eq $assetName } | Select-Object -ExpandProperty browser_download_url
              }

              if (-not $assetUrl) { Write-Host "No asset for $channel $arch, skipping..."; continue }

              # Prepare temp paths
              $tempDir = "$env:TEMP\edge_$channel_$arch"
              Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
              New-Item -ItemType Directory -Path $tempDir | Out-Null

              # Download Edge zip
              Write-Host "Downloading $assetName..."
              (New-Object System.Net.WebClient).DownloadFile($assetUrl, "$tempDir\edge.zip")
              (New-Object System.Net.WebClient).DownloadFile("https://www.7-zip.org/a/7zr.exe", "$tempDir\7zr.exe")

              # Download Chrome++
              $chromePlusUrl = Invoke-RestMethod "https://api.github.com/repos/Bush2021/chrome_plus/releases/latest" |
                ForEach-Object { $_.assets | Where-Object { $_.name -eq "setdll.7z" } | Select-Object -ExpandProperty browser_download_url }
              (New-Object System.Net.WebClient).DownloadFile($chromePlusUrl, "$tempDir\setdll.7z")

              # Extract Edge
              & "$tempDir\7zr.exe" x "$tempDir\edge.zip" "-o$tempDir\edge" -y | Out-Null

              # Extract Chrome++
              & "$tempDir\7zr.exe" x "$tempDir\setdll.7z" "-o$tempDir\chromeplus" -y | Out-Null

              # Build portable
              $portablePath = "$tempDir\Edge_Portable\Edge"
              New-Item -ItemType Directory -Path $portablePath -Force | Out-Null
              Copy-Item "$tempDir\edge\*" $portablePath -Recurse -Force
              (New-Object System.Net.WebClient).DownloadFile("https://raw.githubusercontent.com/bibicadotnet/microsoft-edge-portable/main/chrome%2B%2B.ini", "$portablePath\chrome++.ini")
              $archExe = if ($arch -eq "x86") { "setdll-x86.exe" } else { "setdll-x64.exe" }
              $archDll = if ($arch -eq "x86") { "version-x86.dll" } else { "version-x64.dll" }
              Copy-Item "$tempDir\chromeplus\$archExe" "$portablePath\$archExe" -Force
              Copy-Item "$tempDir\chromeplus\$archDll" "$portablePath\version.dll" -Force
              Push-Location $portablePath
              & ".\$archExe" /d:version.dll msedge.exe | Out-Null
              Pop-Location
              Remove-Item "$portablePath\$archExe" -Force -ErrorAction SilentlyContinue

              # Zip portable
              $outZip = "$env:GITHUB_WORKSPACE\edge-$channel-portable-$arch-$version.zip"
              Compress-Archive -Path "$tempDir\Edge_Portable\*" -DestinationPath $outZip -CompressionLevel Optimal
              $files += $outZip
            }

            if ($files.Count -gt 0) {
              gh release create "$portableTag" $files --title "$portableTag" --notes "Auto portable build for $channel $version with Chrome++ $chromePlusVersion"
              Write-Host "Created portable release $portableTag"
            }
          }
