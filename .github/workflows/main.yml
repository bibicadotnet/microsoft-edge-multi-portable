name: Edge Multi Portable Auto Builder

on:
  schedule:
    - cron: '*/10 * * * *'  # Chạy mỗi 10 phút
  workflow_dispatch:  # Cho phép chạy thủ công

permissions:
  contents: write
  packages: write

jobs:
  check-and-build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get all Edge releases
      id: edge-releases
      shell: powershell
      run: |
        try {
          Write-Host "Fetching Edge releases from edge_installer_multi..." -ForegroundColor Yellow
          $edgeReleases = Invoke-RestMethod "https://api.github.com/repos/bibicadotnet/edge_installer_multi/releases"
          $releaseData = @()
          
          foreach ($release in $edgeReleases) {
            Write-Host "Processing release: $($release.tag_name)" -ForegroundColor Cyan
            # Parse release tag (e.g., "stable-139.0.3405.86")
            if ($release.tag_name -match '^(stable|beta|dev|canary)-(.+)$') {
              $channel = $matches[1]
              $version = $matches[2]
              Write-Host "  Channel: $channel, Version: $version" -ForegroundColor Cyan
              
              $channelData = @{
                tag = $release.tag_name
                channel = $channel
                version = $version
                assets = @()
              }
              
              # Chỉ lấy x64
              $arch = "x64"
              $assetName = "edge-$channel-$arch-$version.zip"
              $asset = $release.assets | Where-Object { $_.name -eq $assetName }
              if ($asset) {
                Write-Host "    Found asset: $assetName" -ForegroundColor Green
                $channelData.assets += @{
                  arch = $arch
                  name = $assetName
                  url = $asset.browser_download_url
                }
              } else {
                Write-Host "    Missing asset: $assetName" -ForegroundColor Red
              }
              
              if ($channelData.assets.Count -gt 0) {
                $releaseData += $channelData
              }
            }
          }
          
          $jsonData = $releaseData | ConvertTo-Json -Depth 10 -Compress
          $jsonData | Out-File -FilePath "edge_releases.json" -Encoding UTF8
          
          Write-Host "Found $($releaseData.Count) Edge releases with x64 assets" -ForegroundColor Green
          echo "RELEASES_COUNT=$($releaseData.Count)" >> $env:GITHUB_OUTPUT
        } catch {
          Write-Error "Failed to get Edge releases: $($_.Exception.Message)"
          exit 1
        }
        
    - name: Get latest Chrome++ version
      id: chromeplus-version
      shell: powershell
      run: |
        try {
          Write-Host "Fetching Chrome++ latest release..." -ForegroundColor Yellow
          $chromePlusRelease = Invoke-RestMethod "https://api.github.com/repos/Bush2021/chrome_plus/releases/latest"
          $chromePlusVersion = $chromePlusRelease.tag_name
          echo "CHROMEPLUS_VERSION=$chromePlusVersion" >> $env:GITHUB_OUTPUT
          Write-Host "Chrome++ version: $chromePlusVersion" -ForegroundColor Green
        } catch {
          Write-Error "Failed to get Chrome++ version: $($_.Exception.Message)"
          exit 1
        }
        
    - name: Process all releases
      shell: powershell
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        Write-Host "Starting to process all releases..." -ForegroundColor Yellow
        $releaseData = Get-Content "edge_releases.json" | ConvertFrom-Json
        Write-Host "Loaded $($releaseData.Count) releases from JSON" -ForegroundColor Cyan
        
        foreach ($edgeRelease in $releaseData) {
          $channel = $edgeRelease.channel
          $version = $edgeRelease.version
          Write-Host "Processing release: $channel $version" -ForegroundColor Magenta
          
          foreach ($asset in $edgeRelease.assets) {
            $arch = $asset.arch
            
            # Create release tag for this specific version and architecture
            $releaseTag = "edge-$channel-portable-$arch`_$version`_${{ steps.chromeplus-version.outputs.CHROMEPLUS_VERSION }}"
            
            Write-Host "=== Processing $channel $version $arch ===" -ForegroundColor Cyan
            
            # Check if release exists
            try {
              $headers = @{
                'Authorization' = 'token ${{ secrets.GITHUB_TOKEN }}'
                'Accept' = 'application/vnd.github.v3+json'
              }
              $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/$releaseTag" -Headers $headers -ErrorAction Stop
              Write-Host "Release $releaseTag already exists, skipping..." -ForegroundColor Yellow
              continue
            } catch {
              if ($_.Exception.Response.StatusCode -eq 404) {
                Write-Host "Release $releaseTag does not exist, will create new one" -ForegroundColor Green
              } else {
                Write-Host "Error checking release: $($_.Exception.Message)" -ForegroundColor Red
                continue
              }
            }
            
            # Build Edge Portable for this architecture
            Write-Host "Building Microsoft Edge $channel $arch Portable with Chrome++" -ForegroundColor Green
            
            # Stop any Edge processes
            Stop-Process -Name msedge,MicrosoftEdgeUpdate,edgeupdate,edgeupdatem,MicrosoftEdgeSetup -Force -ErrorAction SilentlyContinue
            
            $rootPath = "$env:GITHUB_WORKSPACE\$releaseTag"
            $portablePath = "$rootPath\Edge_Portable"
            $edgePath = "$portablePath\Edge"
            $tempDir = "$env:TEMP\EdgeInstaller_$channel`_$version`_$arch"
            
            # Prepare directories
            if (Test-Path $tempDir) { Remove-Item $tempDir -Recurse -Force }
            New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
            if (Test-Path $rootPath) { Remove-Item $rootPath -Recurse -Force }
            New-Item -ItemType Directory -Path $rootPath -Force | Out-Null
            New-Item -ItemType Directory -Path $portablePath -Force | Out-Null
            New-Item -ItemType Directory -Path $edgePath -Force | Out-Null
            
            try {
              # Download files
              Write-Host "Downloading Edge $arch..." -ForegroundColor Yellow
              (New-Object System.Net.WebClient).DownloadFile($asset.url, "$tempDir\$($asset.name)")
              (New-Object System.Net.WebClient).DownloadFile("https://www.7-zip.org/a/7zr.exe", "$tempDir\7zr.exe")
              
              Write-Host "Downloading Chrome++..." -ForegroundColor Yellow
              $chromePlusDownloadUrl = "https://github.com/Bush2021/chrome_plus/releases/download/${{ steps.chromeplus-version.outputs.CHROMEPLUS_VERSION }}/setdll.7z"
              (New-Object System.Net.WebClient).DownloadFile($chromePlusDownloadUrl, "$tempDir\setdll.7z")

              # Copy config files from project
              Write-Host "Copying config files..." -ForegroundColor Yellow
              Copy-Item "$env:GITHUB_WORKSPACE\chrome++.ini" "$applicationPath\chrome++.ini" -Force
              Copy-Item "$env:GITHUB_WORKSPACE\update.bat" "$applicationPath\update.bat" -Force
              Copy-Item "$env:GITHUB_WORKSPACE\debloater.reg" "$applicationPath\debloater.reg" -Force
              Copy-Item "$env:GITHUB_WORKSPACE\default-apps-multi-profile.bat" "$applicationPath\default-apps-multi-profile.bat" -Force

              # Download and customize update.bat for this channel
              Write-Host "Downloading and customizing update.bat for $channel channel..." -ForegroundColor Yellow
              $updateBatUrl = "https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/main/update.bat"
              $tempUpdateBat = "$tempDir\update_template.bat"
              (New-Object System.Net.WebClient).DownloadFile($updateBatUrl, $tempUpdateBat)
              
              # Customize the template for this channel
              $channelTitle = $channel.Substring(0,1).ToUpper() + $channel.Substring(1).ToLower()
              $updateBatContent = Get-Content $tempUpdateBat -Raw
              $updateBatContent = $updateBatContent.Replace('{CHANNEL}', $channelTitle)
              $updateBatContent = $updateBatContent.Replace('{CHANNEL_TITLE}', $channelTitle)
              $updateBatContent = $updateBatContent.Replace('{REPOSITORY}', '${{ github.repository }}')
              $updateBatContent | Out-File -FilePath "$edgePath\update.bat" -Encoding ASCII
              Write-Host "Created customized update.bat for $channel" -ForegroundColor Green
              
              # Extract Edge
              Write-Host "Extracting Edge..." -ForegroundColor Yellow
              $sevenZPath = "$tempDir\7zr.exe"
              $extractDir = "$tempDir\extract"
              & $sevenZPath x "$tempDir\$($asset.name)" "-o$extractDir" -y | Out-Null
              
              $msedge7z = Get-ChildItem -Path $extractDir -Name "MSEDGE.7z" -Recurse | Select-Object -First 1
              $msedgeDir = "$tempDir\msedge"
              & $sevenZPath x "$extractDir\$msedge7z" "-o$msedgeDir" -y | Out-Null
              
              # Extract Chrome Plus
              Write-Host "Extracting Chrome++..." -ForegroundColor Yellow
              $chromePlusExtractDir = "$tempDir\chromeplus"
              & $sevenZPath x "$tempDir\setdll.7z" "-o$chromePlusExtractDir" -y | Out-Null
              
              # Install Edge
              Write-Host "Installing Edge..." -ForegroundColor Yellow
              $versionFolder = Get-ChildItem -Path $msedgeDir -Directory -Recurse | Where-Object { $_.Name -match "^\d+\.\d+\.\d+\.\d+$" } | Select-Object -First 1
              if ($versionFolder) {
                Copy-Item $versionFolder.FullName "$edgePath\$($versionFolder.Name)" -Recurse -Force
                
                # QUAN TRỌNG: Copy msedge.exe ra ngoài
                $sourceFile = Get-ChildItem -Path $msedgeDir -Name "msedge.exe" -Recurse | Select-Object -First 1
                if ($sourceFile) {
                  Copy-Item "$msedgeDir\$sourceFile" "$edgePath\msedge.exe" -Force
                }
              }
              
              # Install Chrome Plus - chỉ dùng x64
              Write-Host "Installing Chrome++ for x64..." -ForegroundColor Yellow
              $setdllExe = "setdll-x64.exe"
              $versionDll = "version-x64.dll"
              
              Copy-Item "$chromePlusExtractDir\$setdllExe" "$edgePath\$setdllExe" -Force
              Copy-Item "$chromePlusExtractDir\$versionDll" "$edgePath\version.dll" -Force
              
              # Apply Chrome Plus
              Write-Host "Applying Chrome++..." -ForegroundColor Yellow
              Push-Location $edgePath
              & ".\$setdllExe" /d:version.dll msedge.exe | Out-Null
              Pop-Location
              
              # Cleanup temp files and installer remnants
              Remove-Item $tempDir -Recurse -Force
              Remove-Item "$edgePath\$setdllExe", "$edgePath\msedge.exe~" -Force -ErrorAction SilentlyContinue
              
              Write-Host "Build completed!" -ForegroundColor Green
              
              # Create ZIP archive
              $zipPath = "$env:GITHUB_WORKSPACE\$releaseTag.zip"
              Compress-Archive -Path "$rootPath\*" -DestinationPath $zipPath -CompressionLevel Optimal
              Write-Host "Created archive: $zipPath"
              
              # Create Release and Upload Asset
              $releaseTitle = "$channel-portable-$arch`_$version`_${{ steps.chromeplus-version.outputs.CHROMEPLUS_VERSION }}"
              $releaseBody = "**Microsoft Edge $channel $arch Portable with Chrome++ Auto Build**`n`n**Edge Version:** $version`n**Chrome++ Version:** ${{ steps.chromeplus-version.outputs.CHROMEPLUS_VERSION }}`n**Channel:** $channel`n**Architecture:** $arch`n`n## What's Included`n- Microsoft Edge $channel $arch Portable`n- Chrome++ enhancements`n- Pre-configured settings`n- Auto-updater script`n`n## Installation`n1. Download the ZIP file`n2. Extract to your desired location`n3. Run Edge_Portable\Edge\msedge.exe`n`n## Update`n1. Run Edge_Portable\Edge\update.bat`n2. Your settings and chrome++.ini configuration will be preserved`n`n## Features`n- Fully portable - no installation required`n- Enhanced with Chrome++ features`n- Auto-configured for optimal experience`n- Easy update mechanism`n`n---`n*This release was automatically generated by GitHub Actions*"
              
              gh release create $releaseTag --title $releaseTitle --notes $releaseBody --repo ${{ github.repository }} $zipPath
              Write-Host "Release created successfully!" -ForegroundColor Green
              
              # Cleanup
              Remove-Item $zipPath -Force -ErrorAction SilentlyContinue
              Remove-Item $rootPath -Recurse -Force -ErrorAction SilentlyContinue
              
            } catch {
              Write-Host "Failed to build $channel $version $arch : $($_.Exception.Message)" -ForegroundColor Red
              # Cleanup on error
              Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
              Remove-Item $rootPath -Recurse -Force -ErrorAction SilentlyContinue
            }
          }
        }
        
    - name: Summary
      shell: powershell
      run: |
        Write-Host "Processing completed!" -ForegroundColor Green
        Write-Host "Processed ${{ steps.edge-releases.outputs.RELEASES_COUNT }} Edge releases" -ForegroundColor Yellow
