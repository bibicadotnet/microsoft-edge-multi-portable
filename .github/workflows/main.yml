name: Edge Multi Portable Builder

on:
  schedule:
    - cron: '0 * * * *' # Chạy mỗi giờ
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-multi-portable:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Chrome++ version
        id: chromeplus
        shell: pwsh
        run: |
          $chromePlusRelease = Invoke-RestMethod "https://api.github.com/repos/Bush2021/chrome_plus/releases/latest"
          echo "version=$($chromePlusRelease.tag_name)" >> $env:GITHUB_OUTPUT
          $asset = $chromePlusRelease.assets | Where-Object { $_.name -eq "setdll.7z" }
          echo "url=$($asset.browser_download_url)" >> $env:GITHUB_OUTPUT

      - name: Get all Edge releases from multi
        id: edgereleases
        shell: pwsh
        run: |
          $releases = Invoke-RestMethod "https://api.github.com/repos/bibicadotnet/edge_installer_multi/releases"
          $list = @()
          foreach ($rel in $releases) {
            if ($rel.tag_name -match '^(stable|beta|dev|canary)-\d+\.\d+\.\d+\.\d+$') {
              $list += $rel
            }
          }
          echo "count=$($list.Count)" >> $env:GITHUB_OUTPUT
          Set-Content -Path releases.json -Value ($list | ConvertTo-Json -Depth 10)
      
      - name: Loop build
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $chromePlusVer = "${{ steps.chromeplus.outputs.version }}"
          $chromePlusUrl = "${{ steps.chromeplus.outputs.url }}"
          $archs = @("x86","x64","ARM64")
          $releases = Get-Content releases.json | ConvertFrom-Json
          
          foreach ($rel in $releases) {
            $tagParts = $rel.tag_name -split "-"
            $channel = $tagParts[0]
            $version = $tagParts[1]
            $portableTag = "$channel-portable-$version"

            # Check nếu release portable đã tồn tại
            try {
              gh release view "$portableTag" --repo $env:GITHUB_REPOSITORY | Out-Null
              Write-Host "Portable release $portableTag exists, skipping..."
              continue
            } catch {
              Write-Host "Will create portable release $portableTag"
            }

            $filesToUpload = @()
            foreach ($arch in $archs) {
              $asset = $rel.assets | Where-Object { $_.name -eq "edge-$channel-$arch-$version.zip" }
              if (-not $asset) {
                Write-Host "No asset for $channel $arch $version"
                continue
              }
              
              $tempDir = Join-Path $env:RUNNER_TEMP "$channel-$arch-$version"
              $edgePath = Join-Path $tempDir "Edge"
              New-Item -ItemType Directory -Path $edgePath -Force | Out-Null

              # Download Edge zip
              $edgeZip = Join-Path $tempDir "edge.zip"
              Invoke-WebRequest -Uri $asset.browser_download_url -OutFile $edgeZip

              # Download Chrome++
              $chromeZip = Join-Path $tempDir "setdll.7z"
              Invoke-WebRequest -Uri $chromePlusUrl -OutFile $chromeZip

              # Download 7zr
              $sevenZ = Join-Path $tempDir "7zr.exe"
              Invoke-WebRequest -Uri "https://www.7-zip.org/a/7zr.exe" -OutFile $sevenZ

              # Extract Edge
              & $sevenZ x $edgeZip "-o$edgePath" -y | Out-Null

              # Extract Chrome++
              $chromeDir = Join-Path $tempDir "chromeplus"
              & $sevenZ x $chromeZip "-o$chromeDir" -y | Out-Null

              # Copy chrome++.ini
              Invoke-WebRequest -Uri "https://raw.githubusercontent.com/bibicadotnet/microsoft-edge-portable/main/chrome%2B%2B.ini" -OutFile (Join-Path $edgePath "chrome++.ini")

              # Copy Chrome++ files
              $setdllFile = "setdll-$arch.exe"
              if ($arch -eq "x86") { $setdllFile = "setdll.exe" }
              Copy-Item (Join-Path $chromeDir $setdllFile) (Join-Path $edgePath $setdllFile) -Force
              Copy-Item (Join-Path $chromeDir "version-$arch.dll") (Join-Path $edgePath "version.dll") -Force

              # Apply Chrome++
              Push-Location $edgePath
              & ".\$setdllFile" /d:version.dll msedge.exe | Out-Null
              Pop-Location

              # Nén thành portable zip
              $portableZip = Join-Path $env:GITHUB_WORKSPACE "edge-$channel-portable-$arch-$version.zip"
              Compress-Archive -Path "$edgePath\*" -DestinationPath $portableZip -Force
              $filesToUpload += $portableZip
            }

            if ($filesToUpload.Count -gt 0) {
              gh release create "$portableTag" --title "$portableTag" --notes "Auto portable build for $channel $version with Chrome++ $chromePlusVer" $filesToUpload
            }
          }
