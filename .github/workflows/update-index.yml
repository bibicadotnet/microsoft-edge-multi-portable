name: Update Index Page

on:
  schedule:
    # Chạy mỗi 5 phút
    - cron: '*/5 * * * *'
  workflow_dispatch: # Cho phép chạy thủ công

jobs:
  update-index:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update index.html with latest versions
      shell: powershell
      run: |
        # Lấy danh sách releases từ GitHub
        Write-Host "Fetching GitHub releases..."
        try {
            $githubReleases = Invoke-RestMethod -Uri "https://api.github.com/repos/bibicadotnet/microsoft-edge-multi-portable/releases" -Headers @{
                "User-Agent" = "GitHub-Actions"
            }
        } catch {
            Write-Host "Error fetching GitHub releases: $_"
            exit 1
        }
        
        Write-Host "Found $($githubReleases.Count) releases"
        
        # Tạo HTML content cho từng channel
        $channels = @("Stable", "Beta", "Dev", "Canary")
        $versionItems = @()
        
        foreach ($channel in $channels) {
            $channelDisplayName = if ($channel -eq "Dev") { "Microsoft Edge Developer" } else { "Microsoft Edge $channel" }
            $pattern = "edge-$($channel.ToLower())-portable"
            
            # Tìm release mới nhất cho channel này
            $channelReleases = $githubReleases | Where-Object { 
                $_.tag_name -like "*$pattern*" 
            } | Sort-Object published_at -Descending
            
            if ($channelReleases.Count -gt 0) {
                $latestRelease = $channelReleases[0]
                
                # Extract version từ tag name
                $versionMatch = $latestRelease.tag_name -match "x64_([0-9.]+)_"
                $version = if ($versionMatch) { $matches[1] } else { "Unknown" }
                
                # Tìm file zip trong assets
                $zipAsset = $latestRelease.assets | Where-Object { $_.name -like "*.zip" }
                
                if ($zipAsset) {
                    $downloadUrl = $zipAsset.browser_download_url
                    $versionItems += "                    <li class=`"version-item`">"
                    $versionItems += "                        <div>"
                    $versionItems += "                            <div class=`"version-name`">$channelDisplayName</div>"
                    $versionItems += "                            <a href=`"$downloadUrl`" class=`"download-link`" target=`"_blank`">Download ZIP</a>"
                    $versionItems += "                        </div>"
                    $versionItems += "                        <div class=`"version-number`">$version</div>"
                    $versionItems += "                    </li>"
                } else {
                    $versionItems += "                    <li class=`"version-item`">"
                    $versionItems += "                        <div>"
                    $versionItems += "                            <div class=`"version-name`">$channelDisplayName</div>"
                    $versionItems += "                            <span class=`"unavailable`">No ZIP found</span>"
                    $versionItems += "                        </div>"
                    $versionItems += "                        <div class=`"version-number`">$version</div>"
                    $versionItems += "                    </li>"
                }
                
                Write-Host "$channel : $version"
            } else {
                $versionItems += "                    <li class=`"version-item`">"
                $versionItems += "                        <div>"
                $versionItems += "                            <div class=`"version-name`">$channelDisplayName</div>"
                $versionItems += "                            <span class=`"unavailable`">Not available yet</span>"
                $versionItems += "                        </div>"
                $versionItems += "                        <div class=`"version-number`">-</div>"
                $versionItems += "                    </li>"
                
                Write-Host "$channel : Not available"
            }
        }
        
        # Đọc file index.html hiện tại
        if (-not (Test-Path "index.html")) {
            Write-Host "index.html not found!"
            exit 1
        }
        
        $indexContent = Get-Content "index.html" -Raw -Encoding UTF8
        
        # Thay thế phần versions
        $startMarker = "<!-- AUTO_UPDATE_START -->"
        $endMarker = "<!-- AUTO_UPDATE_END -->"
        
        $startIndex = $indexContent.IndexOf($startMarker)
        $endIndex = $indexContent.IndexOf($endMarker)
        
        if ($startIndex -eq -1 -or $endIndex -eq -1) {
            Write-Host "Cannot find version markers in index.html"
            Write-Host "Looking for: '$startMarker' and '$endMarker'"
            exit 1
        }
        
        # Tách nội dung
        $beforeVersions = $indexContent.Substring(0, $startIndex + $startMarker.Length)
        $afterVersions = $indexContent.Substring($endIndex)
        
        # Tạo phần versions mới
        $versionSection = "`r`n" + ($versionItems -join "`r`n") + "`r`n                    "
        
        # Ghép nội dung mới
        $newIndexContent = $beforeVersions + $versionSection + $afterVersions
        
        # Cập nhật thời gian
        $timeStartMarker = "<!-- AUTO_UPDATE_TIME_START -->"
        $timeEndMarker = "<!-- AUTO_UPDATE_TIME_END -->"
        
        $timeStartIndex = $newIndexContent.IndexOf($timeStartMarker)
        $timeEndIndex = $newIndexContent.IndexOf($timeEndMarker)
        
        if ($timeStartIndex -ne -1 -and $timeEndIndex -ne -1) {
            $currentTime = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss UTC")
            $beforeTime = $newIndexContent.Substring(0, $timeStartIndex + $timeStartMarker.Length)
            $afterTime = $newIndexContent.Substring($timeEndIndex)
            $timeSection = "`r`n            Last updated: $currentTime`r`n            "
            $newIndexContent = $beforeTime + $timeSection + $afterTime
        }
        
        # Ghi vào file
        Set-Content "index.html" -Value $newIndexContent -Encoding UTF8 -NoNewline
        
        Write-Host "index.html updated successfully"
        
        # Hiển thị thay đổi
        Write-Host "`nVersion information updated for index.html"

    - name: Check for changes and commit
      shell: powershell
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes
        git add index.html
        
        $changes = git diff --cached --name-only
        if ([string]::IsNullOrEmpty($changes)) {
            Write-Host "No changes to commit"
        } else {
            Write-Host "Changes detected, committing..."
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
            git commit -m "Update index page - $timestamp"
            git push
            Write-Host "Changes committed and pushed"
        }
