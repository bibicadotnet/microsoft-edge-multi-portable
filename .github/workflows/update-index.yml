name: Update Index Page

on:
  schedule:
    # Chạy mỗi 5 phút
    - cron: '*/5 * * * *'
  workflow_dispatch: # Cho phép chạy thủ công

jobs:
  update-index:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update index.html with latest versions
      shell: powershell
      run: |
        # Fetch all Edge release data once
        Write-Host "Fetching Edge release data..."
        try {
            $allReleases = Invoke-RestMethod "https://edgeupdates.microsoft.com/api/products"
        } catch {
            Write-Host "Error fetching Edge data: $_"
            exit 1
        }
        
        # Lấy phiên bản mới nhất cho từng channel từ Microsoft
        $latestEdgeVersions = @{
            "Stable" = ($allReleases | Where-Object { $_.Product -eq "Stable" }).Releases |
                       Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                       Sort-Object PublishedTime -Descending |
                       Select-Object -First 1 -ExpandProperty ProductVersion
            "Beta" = ($allReleases | Where-Object { $_.Product -eq "Beta" }).Releases |
                     Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                     Sort-Object PublishedTime -Descending |
                     Select-Object -First 1 -ExpandProperty ProductVersion
            "Dev" = ($allReleases | Where-Object { $_.Product -eq "Dev" }).Releases |
                    Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                    Sort-Object PublishedTime -Descending |
                    Select-Object -First 1 -ExpandProperty ProductVersion
            "Canary" = ($allReleases | Where-Object { $_.Product -eq "Canary" }).Releases |
                       Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                       Sort-Object PublishedTime -Descending |
                       Select-Object -First 1 -ExpandProperty ProductVersion
        }
        
        Write-Host "Latest Edge versions from Microsoft:"
        $latestEdgeVersions.GetEnumerator() | ForEach-Object { Write-Host "  $($_.Key): $($_.Value)" }
        
        # Lấy danh sách releases từ GitHub
        Write-Host "Fetching GitHub releases..."
        try {
            $githubReleases = Invoke-RestMethod -Uri "https://api.github.com/repos/bibicadotnet/microsoft-edge-multi-portable/releases" -Headers @{
                "User-Agent" = "GitHub-Actions"
            }
        } catch {
            Write-Host "Error fetching GitHub releases: $_"
            exit 1
        }
        
        Write-Host "Found $($githubReleases.Count) releases on GitHub"
        
        # Tạo HTML content cho từng channel
        $channels = @("Stable", "Beta", "Dev", "Canary")
        $versionItems = @()
        
        foreach ($channel in $channels) {
            $channelDisplayName = if ($channel -eq "Dev") { "Microsoft Edge Developer Portable" } else { "Microsoft Edge $channel Portable" }
            $latestVersion = $latestEdgeVersions[$channel]
            
            if ($latestVersion) {
                # Tìm release tương ứng trên GitHub với phiên bản mới nhất
                $releasePattern = "edge-$($channel.ToLower())-portable-x64_$($latestVersion)_"
                $matchingRelease = $githubReleases | Where-Object { $_.tag_name -like "$releasePattern*" }
                
                if ($matchingRelease) {
                    # Có portable release cho phiên bản mới nhất
                    $zipAsset = $matchingRelease.assets | Where-Object { $_.name -like "*.zip" }
                    
                    if ($zipAsset) {
                        $downloadUrl = $zipAsset.browser_download_url
                        $versionItems += "                    <li class=`"version-item`">"
                        $versionItems += "                        <a href=`"$downloadUrl`" class=`"version-link`" target=`"_blank`">"
                        $versionItems += "                            $channelDisplayName"
                        $versionItems += "                        </a>"
                        $versionItems += "                        <span class=`"version-number`">$latestVersion</span>"
                        $versionItems += "                    </li>"
                        Write-Host "$channel : $latestVersion (available)"
                    } else {
                        $versionItems += "                    <li class=`"version-item`">"
                        $versionItems += "                        <span class=`"version-name`">$channelDisplayName</span>"
                        $versionItems += "                        <span class=`"version-number`">$latestVersion</span>"
                        $versionItems += "                    </li>"
                        Write-Host "$channel : $latestVersion (no ZIP)"
                    }
                } else {
                    # Chưa có portable release cho phiên bản mới nhất
                    # Tìm release gần nhất cho channel này
                    $channelPattern = "edge-$($channel.ToLower())-portable"
                    $latestChannelRelease = $githubReleases | Where-Object { 
                        $_.tag_name -like "*$channelPattern*" 
                    } | Sort-Object published_at -Descending | Select-Object -First 1
                    
                    if ($latestChannelRelease) {
                        # Extract version từ tag name
                        $versionMatch = $latestChannelRelease.tag_name -match "x64_([0-9.]+)_"
                        $availableVersion = if ($versionMatch) { $matches[1] } else { "Unknown" }
                        
                        $zipAsset = $latestChannelRelease.assets | Where-Object { $_.name -like "*.zip" }
                        
                        if ($zipAsset) {
                            $downloadUrl = $zipAsset.browser_download_url
                            $versionItems += "                    <li class=`"version-item`">"
                            $versionItems += "                        <a href=`"$downloadUrl`" class=`"version-link`" target=`"_blank`">"
                            $versionItems += "                            $channelDisplayName"
                            $versionItems += "                        </a>"
                            $versionItems += "                        <span class=`"version-number`">$availableVersion <span class=`"latest-version`">(latest: $latestVersion)</span></span>"
                            $versionItems += "                    </li>"
                            Write-Host "$channel : $availableVersion (outdated, latest: $latestVersion)"
                        } else {
                            $versionItems += "                    <li class=`"version-item`">"
                            $versionItems += "                        <span class=`"version-name`">$channelDisplayName</span>"
                            $versionItems += "                        <span class=`"version-number`">$availableVersion <span class=`"latest-version`">(latest: $latestVersion)</span></span>"
                            $versionItems += "                    </li>"
                            Write-Host "$channel : $availableVersion (no ZIP, latest: $latestVersion)"
                        }
                    } else {
                        # Không có release nào cho channel này
                        $versionItems += "                    <li class=`"version-item`">"
                        $versionItems += "                        <span class=`"version-name`">$channelDisplayName</span>"
                        $versionItems += "                        <span class=`"version-number`">- <span class=`"latest-version`">(latest: $latestVersion)</span></span>"
                        $versionItems += "                    </li>"
                        Write-Host "$channel : Not available (latest: $latestVersion)"
                    }
                }
            } else {
                # Không thể lấy phiên bản mới nhất từ Microsoft
                $versionItems += "                    <li class=`"version-item`">"
                $versionItems += "                        <span class=`"version-name`">$channelDisplayName</span>"
                $versionItems += "                        <span class=`"version-number`">-</span>"
                $versionItems += "                    </li>"
                Write-Host "$channel : Version check failed"
            }
        }
        
        # Đọc file index.html hiện tại
        if (-not (Test-Path "index.html")) {
            Write-Host "index.html not found!"
            exit 1
        }
        
        $currentContent = Get-Content "index.html" -Raw -Encoding UTF8
        
        # Tạo nội dung mới
        $startMarker = "<!-- AUTO_UPDATE_START -->"
        $endMarker = "<!-- AUTO_UPDATE_END -->"
        
        $startIndex = $currentContent.IndexOf($startMarker)
        $endIndex = $currentContent.IndexOf($endMarker)
        
        if ($startIndex -eq -1 -or $endIndex -eq -1) {
            Write-Host "Cannot find version markers in index.html"
            Write-Host "Looking for: '$startMarker' and '$endMarker'"
            exit 1
        }
        
        # Tách nội dung
        $beforeVersions = $currentContent.Substring(0, $startIndex + $startMarker.Length)
        $afterVersions = $currentContent.Substring($endIndex)
        
        # Tạo phần versions mới
        $versionSection = "`r`n" + ($versionItems -join "`r`n") + "`r`n                    "
        
        # Ghép nội dung mới
        $newContent = $beforeVersions + $versionSection + $afterVersions
        
        # Cập nhật thời gian
        $timeStartMarker = "<!-- AUTO_UPDATE_TIME_START -->"
        $timeEndMarker = "<!-- AUTO_UPDATE_TIME_END -->"
        
        $timeStartIndex = $newContent.IndexOf($timeStartMarker)
        $timeEndIndex = $newContent.IndexOf($timeEndMarker)
        
        if ($timeStartIndex -ne -1 -and $timeEndIndex -ne -1) {
            $currentTime = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss UTC")
            $beforeTime = $newContent.Substring(0, $timeStartIndex + $timeStartMarker.Length)
            $afterTime = $newContent.Substring($timeEndIndex)
            $timeSection = "`r`n            Last updated: $currentTime`r`n            "
            $newContent = $beforeTime + $timeSection + $afterTime
        }
        
        # KIỂM TRA: So sánh nội dung cũ và mới
        if ($currentContent -eq $newContent) {
            Write-Host "No changes detected. Skipping update."
            exit 0
        }
        
        Write-Host "Changes detected. Updating index.html..."
        
        # Ghi vào file
        Set-Content "index.html" -Value $newContent -Encoding UTF8 -NoNewline
        
        Write-Host "index.html updated successfully"

    - name: Check for changes and commit
      shell: powershell
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes
        git add index.html
        
        $changes = git diff --cached --name-only
        if ([string]::IsNullOrEmpty($changes)) {
            Write-Host "No changes to commit"
        } else {
            Write-Host "Changes detected, committing..."
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
            git commit -m "Update index page - $timestamp"
            git push
            Write-Host "Changes committed and pushed"
        }
