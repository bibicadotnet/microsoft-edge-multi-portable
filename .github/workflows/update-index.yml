name: Update Index Page

on:
  schedule:
    # Chạy mỗi 5 phút
    - cron: '*/5 * * * *'
  workflow_dispatch: # Cho phép chạy thủ công

jobs:
  update-index:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update index.html with latest versions
      shell: powershell
      run: |
        # Lấy dữ liệu từ Microsoft Edge Updates API
        Write-Host "Fetching Edge release data..."
        try {
            $allReleases = Invoke-RestMethod "https://edgeupdates.microsoft.com/api/products"
        } catch {
            Write-Host "Error fetching Edge data: $_"
            exit 1
        }

        # Lấy phiên bản mới nhất cho từng channel (x64 / Windows)
        $latestEdgeVersions = @{
            "Stable" = ($allReleases | Where-Object { $_.Product -eq "Stable" }).Releases |
                       Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                       Sort-Object PublishedTime -Descending |
                       Select-Object -First 1 -ExpandProperty ProductVersion
            "Beta" = ($allReleases | Where-Object { $_.Product -eq "Beta" }).Releases |
                     Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                     Sort-Object PublishedTime -Descending |
                     Select-Object -First 1 -ExpandProperty ProductVersion
            "Dev" = ($allReleases | Where-Object { $_.Product -eq "Dev" }).Releases |
                    Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                    Sort-Object PublishedTime -Descending |
                    Select-Object -First 1 -ExpandProperty ProductVersion
            "Canary" = ($allReleases | Where-Object { $_.Product -eq "Canary" }).Releases |
                       Where-Object { $_.Platform -eq "Windows" -and $_.Architecture -eq "x64" } |
                       Sort-Object PublishedTime -Descending |
                       Select-Object -First 1 -ExpandProperty ProductVersion
        }

        Write-Host "Latest Edge versions from Microsoft:"
        $latestEdgeVersions.GetEnumerator() | ForEach-Object { Write-Host "  $($_.Key): $($_.Value)" }

        # Lấy releases từ GitHub (repo portable)
        Write-Host "Fetching GitHub releases..."
        try {
            $githubReleases = Invoke-RestMethod -Uri "https://api.github.com/repos/bibicadotnet/microsoft-edge-multi-portable/releases" -Headers @{
                "User-Agent" = "GitHub-Actions"
            }
        } catch {
            Write-Host "Error fetching GitHub releases: $_"
            exit 1
        }

        $channels = @("Stable", "Beta", "Dev", "Canary")
        $versionItems = @()

        foreach ($channel in $channels) {
            $channelDisplayName = switch ($channel) {
                "Stable" { "Microsoft Edge Stable Portable" }
                "Beta"   { "Microsoft Edge Beta Portable" }
                "Dev"    { "Microsoft Edge Developer Portable" }
                "Canary" { "Microsoft Edge Canary Portable" }
            }
            $latestVersion = $latestEdgeVersions[$channel]

            if ($latestVersion) {
                $releasePattern = "edge-$($channel.ToLower())-portable-x64_$($latestVersion)_"
                $matchingRelease = $githubReleases | Where-Object { $_.tag_name -like "$releasePattern*" }

                if ($matchingRelease) {
                    $zipAsset = $matchingRelease.assets | Where-Object { $_.name -like "*.zip" }
                    if ($zipAsset) {
                        $downloadUrl = $zipAsset.browser_download_url
                        $versionItems += "  <li class=`"version-item`">"
                        $versionItems += "    <span class=`"version-name`">$channelDisplayName</span>"
                        $versionItems += "    <a class=`"version-link`" href=`"$downloadUrl`" target=`"_blank`">$latestVersion</a>"
                        $versionItems += "  </li>"
                        Write-Host "$channel : $latestVersion (available)"
                    } else {
                        Write-Host "$channel : $latestVersion (no ZIP asset)"
                    }
                } else {
                    Write-Host "$channel : $latestVersion (no release found)"
                }
            } else {
                Write-Host "$channel : Version check failed"
            }
        }

        # Đọc index.html
        if (-not (Test-Path "index.html")) {
            Write-Host "index.html not found!"
            exit 1
        }

        $indexContent = Get-Content "index.html" -Raw -Encoding UTF8
        $startMarker = "<!-- AUTO_UPDATE_START -->"
        $endMarker   = "<!-- AUTO_UPDATE_END -->"

        $startIndex = $indexContent.IndexOf($startMarker)
        $endIndex   = $indexContent.IndexOf($endMarker)

        if ($startIndex -eq -1 -or $endIndex -eq -1) {
            Write-Host "Markers not found in index.html"
            exit 1
        }

        $beforeVersions = $indexContent.Substring(0, $startIndex + $startMarker.Length)
        $afterVersions  = $indexContent.Substring($endIndex)
        $versionSection = "`r`n" + ($versionItems -join "`r`n") + "`r`n"

        $newIndexContent = $beforeVersions + $versionSection + $afterVersions

        # Cập nhật thời gian
        $timeStartMarker = "<!-- AUTO_UPDATE_TIME_START -->"
        $timeEndMarker   = "<!-- AUTO_UPDATE_TIME_END -->"
        $timeStartIndex  = $newIndexContent.IndexOf($timeStartMarker)
        $timeEndIndex    = $newIndexContent.IndexOf($timeEndMarker)

        if ($timeStartIndex -ne -1 -and $timeEndIndex -ne -1) {
            $currentTime = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss UTC")
            $beforeTime = $newIndexContent.Substring(0, $timeStartIndex + $timeStartMarker.Length)
            $afterTime  = $newIndexContent.Substring($timeEndIndex)
            $timeSection = "`r`n    Last updated: $currentTime`r`n"
            $newIndexContent = $beforeTime + $timeSection + $afterTime
        }

        Set-Content "index.html" -Value $newIndexContent -Encoding UTF8 -NoNewline
        Write-Host "index.html updated successfully"

    - name: Commit changes
      shell: powershell
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add index.html
        $changes = git diff --cached --name-only
        if ([string]::IsNullOrEmpty($changes)) {
            Write-Host "No changes to commit"
        } else {
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
            git commit -m "Update index page - $timestamp"
            git push
            Write-Host "Changes committed and pushed"
